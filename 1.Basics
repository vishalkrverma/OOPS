-----------  CLASS -----------------------------------
Class
● Is a user-defined type
− Describes the data (attributes)
− Defines the behavior (methods)
Method is a set of the code which performs a particular tasks..[ Code Reusability , Code Optimization].
● Instances of a class are objects.

CLASS DOESNOT OCCUPY THE MEMORY.. while OBJECT occupy the memory bcz objects are the real world entity and also these are the instances of the classes.

------ A CLASS MUST BE CONTAINS THESE CHARACTERISTICS -----------------------
<modifier>* class <class_name>{
 <attribute_declaration>*
 <constructor_declaration>*
 <method_declaration>*
}

-------------------  ENCAPSULATION -----------------------------------------------
Encapsulation
● Bundling of data with the methods that operate on that data (restricting of direct access to some of an object's components).
● Hides the implementation details of a class.
● Forces the user to use an interface to access data.
● Makes the code more maintainable.

------------------  UML - GRAPHICAL CLASS  REPRESENTATION -------------------------
"-"  is used to represents the private access of the class.
"+" is used to represents the public access of the class.


------------------  CONSTRUCTORS  ----------------------------------------------
● Role: object initialization
● Name of the constructor must be the same as that of class name.
● Must not have return type.
● Every class should have at least one constructor. 
○ If you don't write constructor, compiler will generate the default constructor.
● Constructors are usually declared public.
○ Constructor can be declared as private → You can't use it outside the class.
● One class can have more than one constructors.
○ Constructor overloading

-------------------  DEFAULT CONSTRUCTORS -------------------------------------------
● There is always at least one constructor in every class.
● If the programmer does not supply any constructors, the default constructor is generated by the compiler
○ The default constructor takes no argument
○ The default constructor's body is empty


----------------  CONSTRUCTING AND INITIALIZING OBJECTS -------------------------
MyDate date1 = new MyDate(20, 6, 2000);
 new MyDate(20, 6, 2000);
1) Memory is allocated for the object
2) Explicit attribute initialization is performed
3) A constructor is executed
4) The object reference is returned by the new operator

---------------  USE OF THE [THIS] KEYWORDS -----------------------------------------
− To resolve ambiguity between instance variables and parameters.
− To pass the current object as a parameter to another method.

-------------------- VARIABLE AND THE SCOPE -----------------------------------------
● Local variables are defined inside a method.
● Created when the method is executed and destroyed when the method is exited.
● Not initialized automatically.
● Created on the execution stack.

------------------------- CREATION OF ARRAYS------------------------------------
Reference Type:
//array declaration   Point [] t; 
 //array creation – array of references!!!
 t = new Point[3]; 
How many objects of type Point?------------->  [3] DENOTES THE SIZE:


-----------------------------  STATIC MEMBERS -----------------------------------------------
Problems
● How can you create a constant?
● How can you declare data that is shared by all instances of a given class?
● How can you prevent a class from being subclassed?
● How can you prevent a method from being overridden?

Static Members
● Static data + static methods = static members
● Data are allocated at class load time → can be used without instances.
● Instance methods may use static data. Why?
● Static methods cannot use instance data.













